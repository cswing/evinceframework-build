apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'

ext.isSnapshot=version.endsWith('SNAPSHOT')

// uploadArchives properties
group = 'com.evinceframework'
ext.artifactId = 'evf-build-gradle'
ext.optionalDeps = []
ext.providedDeps = []
ext.optional = { optionalDeps << it }
ext.provided = { providedDeps << it }

println "Building version: ${version}"

repositories {
   mavenCentral()
}

dependencies {
   compile gradleApi()
   //groovy localGroovy()
}

task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allGroovy
}

task groovydocJar(type: Jar, dependson: groovydoc) {
	classifier = 'groovydoc'
	from groovydoc
}

task javadocReadme(dependsOn: javadoc) << {
	
	file('build/docs/javadoc').mkdirs()
	
	File readme = file('build/docs/javadoc/README.md')
	readme.write("There is no JavaDoc.  See GroovyDoc.")
}

task javadocJar(type: Jar, dependsOn: javadocReadme) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

artifacts {
	archives jar
	
	archives groovydocJar
	archives javadocJar
	archives sourcesJar
}

task copyToLib(type: Sync) {
    into "${projectDir}/lib"
    from configurations.testCompile
}

signing {	
	required { !isSnapshot.toBoolean() }
	sign configurations.archives
}

install {
	repositories.mavenInstaller {
		customizePom(pom, project)
		pom {
			artifactId = project.artifactId
		}
	}
}

uploadArchives {
	repositories.mavenDeployer {
		customizePom(pom, project)
		pom {
			artifactId = project.artifactId
		}
		
		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
		
		//repository(url: "file://C:/PublishedReleases") {}
		repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
			authentication(userName: sonatypeUsername, password: sonatypePassword)
		}
	}
}

def customizePom(pom, gradleProject) {
	pom.whenConfigured { generatedPom ->
		
		// respect 'optional' and 'provided' dependencies
		gradleProject.optionalDeps.each { dep ->
			generatedPom.dependencies.find { it.artifactId == dep.name }?.optional = true
		}
		gradleProject.providedDeps.each { dep ->
			generatedPom.dependencies.find { it.artifactId == dep.name }?.scope = 'provided'
		}

		// eliminate test-scoped dependencies (no need in maven central poms)
		generatedPom.dependencies.removeAll { dep ->
			dep.scope == 'test'
		}

		// add all items necessary for maven central publication
		generatedPom.project {
			name = gradleProject.description
			description = gradleProject.description
			url = 'https://github.com/cswing/evinceframework-build'
			organization {
				name = 'Evince Framework'
				url = 'http://www.evinceframework.com'
			}
			licenses {
				license {
					name 'The Apache Software License, Version 2.0'
					url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution 'repo'
				}
			}
			scm {
				url = 'git@github.com:cswing/evinceframework-build.git'
				connection = 'scm:git:git@github.com:cswing/evinceframework-build.git'
				developerConnection = 'scm:git:git@github.com:cswing/evinceframework-build.git'
			}
		}
	}
}